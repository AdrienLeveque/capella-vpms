/*******************************************************************************
 * Copyright (c) 2017 THALES GLOBAL SERVICES.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *   
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

package org.polarsys.capella.vp.ms.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.polarsys.capella.vp.ms.MsFactory;
import org.polarsys.capella.vp.ms.MsPackage;
import org.polarsys.capella.vp.ms.util.MsAdapterFactory;
import org.polarsys.kitalpha.emde.extension.ModelExtensionHelper;
import org.polarsys.kitalpha.emde.extension.edit.ChildCreationExtenderManager;
import org.polarsys.kitalpha.emde.model.EmdePackage;
import org.polarsys.kitalpha.emde.model.ExtensibleElement;
import org.polarsys.kitalpha.emde.model.edit.provider.NewChildDescriptorHelper;
import org.polarsys.kitalpha.emde.model.util.EmdeSwitch;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class MsItemProviderAdapterFactory extends MsAdapterFactory
    implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This helps manage the child creation extenders. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
      MsEditPlugin.INSTANCE, MsPackage.eNS_URI);

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public MsItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.CSConfiguration} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected CSConfigurationItemProvider csConfigurationItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.CSConfiguration}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createCSConfigurationAdapter() {
    if (csConfigurationItemProvider == null) {
      csConfigurationItemProvider = new CSConfigurationItemProvider(this);
    }

    return csConfigurationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.ms.FSMType} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected FSMTypeItemProvider fsmTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.FSMType}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  @Override
  public Adapter createFSMTypeAdapter() {
    if (fsmTypeItemProvider == null) {
      fsmTypeItemProvider = new FSMTypeItemProvider(this);
    }

    return fsmTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.ms.Situation} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected SituationItemProvider situationItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.Situation}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createSituationAdapter() {
    if (situationItemProvider == null) {
      situationItemProvider = new SituationItemProvider(this);
    }

    return situationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.InStateExpression} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected InStateExpressionItemProvider inStateExpressionItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.InStateExpression}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createInStateExpressionAdapter() {
    if (inStateExpressionItemProvider == null) {
      inStateExpressionItemProvider = new InStateExpressionItemProvider(this);
    }

    return inStateExpressionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.InSituationExpression}
   * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected InSituationExpressionItemProvider inSituationExpressionItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.InSituationExpression}. <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createInSituationExpressionAdapter() {
    if (inSituationExpressionItemProvider == null) {
      inSituationExpressionItemProvider = new InSituationExpressionItemProvider(this);
    }

    return inSituationExpressionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.ms.AndOperation} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected AndOperationItemProvider andOperationItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.AndOperation}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAndOperationAdapter() {
    if (andOperationItemProvider == null) {
      andOperationItemProvider = new AndOperationItemProvider(this);
    }

    return andOperationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.ms.OrOperation} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected OrOperationItemProvider orOperationItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.OrOperation}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createOrOperationAdapter() {
    if (orOperationItemProvider == null) {
      orOperationItemProvider = new OrOperationItemProvider(this);
    }

    return orOperationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.polarsys.capella.vp.ms.ms.NotOperation} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected NotOperationItemProvider notOperationItemProvider;

  /**
   * This creates an adapter for a {@link org.polarsys.capella.vp.ms.NotOperation}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createNotOperationAdapter() {
    if (notOperationItemProvider == null) {
      notOperationItemProvider = new NotOperationItemProvider(this);
    }

    return notOperationItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public List<IChildCreationExtender> getChildCreationExtenders() {
    return childCreationExtenderManager.getChildCreationExtenders();
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
    return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public ResourceLocator getResourceLocator() {
    return childCreationExtenderManager;
  }

  /**
   * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void dispose() {
    if (csConfigurationItemProvider != null)
      csConfigurationItemProvider.dispose();
    if (fsmTypeItemProvider != null)
      fsmTypeItemProvider.dispose();
    if (situationItemProvider != null)
      situationItemProvider.dispose();
    if (inStateExpressionItemProvider != null)
      inStateExpressionItemProvider.dispose();
    if (inSituationExpressionItemProvider != null)
      inSituationExpressionItemProvider.dispose();
    if (andOperationItemProvider != null)
      andOperationItemProvider.dispose();
    if (orOperationItemProvider != null)
      orOperationItemProvider.dispose();
    if (notOperationItemProvider != null)
      notOperationItemProvider.dispose();
  }

  /**
   * A child creation extender for the {@link EmdePackage}. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public static class EmdeChildCreationExtender implements IChildCreationExtender {
    /**
     * The switch for creating child descriptors specific to each extended class. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected static class CreationSwitch extends EmdeSwitch<Object> {
      /**
       * The child descriptors being populated. <!-- begin-user-doc --> <!-- end-user-doc -->
       * 
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children. <!-- begin-user-doc --> <!-- end-user-doc -->
       * 
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain. <!-- begin-user-doc --> <!--
       * end-user-doc -->
       * 
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }

      /**
       * <!-- begin-user-doc --> <!-- end-user-doc -->
       * 
       * @generated
       */
      @Override
      public Object caseExtensibleElement(ExtensibleElement object) {
        // begin-extension-code
        if (ModelExtensionHelper.getInstance(object).isExtensionModelDisabled(
            EcoreUtil.getRootContainer(object).eClass().getEPackage().getNsURI(),
            "http://www.polarsys.org/capella/ms")) { //$NON-NLS-1$
          return null;
        }
        // end-extension-code
        // begin-extension-code
        {
          CommandParameter commandParameter = createChildParameter(
              EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS, MsFactory.eINSTANCE.createCSConfiguration());
          if (NewChildDescriptorHelper.isValidCommand(object, commandParameter)) {
            newChildDescriptors.add(commandParameter);
          }
        }
        // end-extension-code

        // begin-extension-code
        {
          CommandParameter commandParameter = createChildParameter(
              EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS, MsFactory.eINSTANCE.createFSMType());
          if (NewChildDescriptorHelper.isValidCommand(object, commandParameter)) {
            newChildDescriptors.add(commandParameter);
          }
        }
        // end-extension-code

        // begin-extension-code
        {
          CommandParameter commandParameter = createChildParameter(
              EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS, MsFactory.eINSTANCE.createSituation());
          if (NewChildDescriptorHelper.isValidCommand(object, commandParameter)) {
            newChildDescriptors.add(commandParameter);
          }
        }
        // end-extension-code

        return null;
      }

      /**
       * <!-- begin-user-doc --> <!-- end-user-doc -->
       * 
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child) {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
      ArrayList<Object> result = new ArrayList<Object>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
      return result;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ResourceLocator getResourceLocator() {
      return MsEditPlugin.INSTANCE;
    }
  }

}