<!--
  Copyright (c) 2018 THALES GLOBAL SERVICES.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html

  Contributors:
       Thales - initial API and implementation
-->


= Validation Rules =

The Modes & States viewpoint does not include validation rules that help to ensure the consistency of configurations, e.g. that a configuration references only elements that are in its scope, or that a configuration only references configurations of subcomponents as its child configurations. Such rules will be delivered in a subsequent version.
However, the prototype includes several new validation rules related to State Machines:

'''DWF_SM_16''' - A Mode/State has at least one incoming transition.
When designing an FSM, it is important that all Mode/State has at least one incoming transition. In fact, if no such transition exists, the Mode/State is said unreachable.

'''DWF_SM_17''' - There exists at least two outgoing transition from a Fork Pseudo-State.
A Fork Pseudo-State serves to split an incoming transition into two or more transitions.

'''DWF_SM_18''' - There exists at least two incoming transition to a Join Pseudo-State.
A Join Pseudo-State serves to merge several transitions.

'''DWF_SM_19''' - Into a region, there exists no more than one Initial Pseudo-State.
There is no more than one Initial Pseudo-State into a Region.

'''DWF_SM_20''' - There exists at least one transition starting from an Initial Pseudo-State.
Into a region with an Initial Pseudo-State, there exists at least one transition starting from this Initial Pseudo-State.

'''DWF_SM_21''' - There exists at most one transition starting from an Initial Pseudo-State.
Into a region with an Initial Pseudo-State, there exists at most one transition starting from this Initial Pseudo-State.

'''DWF_SM_22''' - Outgoing transitions of a Pseudo-State should not have a trigger.
Outgoing transitions of a Pseudo-State should not have a trigger.

'''DWF_SM_23''' - There exists at least two outgoing transition from a Choice Pseudo-State.
There exists at least two outgoing transition from a Choice Pseudo-State.

'''DWF_SM_24''' - Outgoing transitions from a Fork Pseudo-State should not have Guard.
Outgoing transitions from a Fork Pseudo-State should not have Guard.

'''DWF_SM_25''' - Incoming transitions to a Join Pseudo-State should not have Guard.
Incoming transitions to a Join Pseudo-State should not have Guard.

'''DWF_SM_26''' - Transitions starting from Initial Pseudo-States cannot have Guard.
Transitions starting from Initial Pseudo-States cannot have Guard.

'''DWF_SM_27''' - Limit the number of inclusions of M/Ss into M/Ss to 3 levels.
Limit the number of inclusions of M/Ss into M/Ss to 3 levels.

'''DWF_SM_28''' - A Mode/State has at least one outgoing transition.
When designing an FSM, it is important that all Mode/State have at least one outgoing transition. In fact, if no such transition exists, the Mode/State is said blocking state.

'''DWF_SM_29''' - Incoming transitions to a Join Pseudo-State should not have Trigger.
Incoming transitions to a Join Pseudo-State should not have Trigger.

'''DWF_SM_30''' - Into a region, there exists at least one Initial Pseudo-State.
There is at least one one Initial Pseudo-State into a Region.

'''DWF_SM_31''' - At least one M/S of the component FSMs has this function set as available.
Let consider a function allocated to a component. If an FSM is linked to this component, then at least one M/S of this FSM has this function set as available.

'''DWF_SM_32''' - The function involved by the ‘do activity’ of the M/S has to be available in this M/S or in the M/S of the higher level (if existing).
The function involved by the ‘do activity’ of the M/S has to be available in this M/S or in the M/S of the higher level (if existing).

'''DWF_SM_33''' - All functions of a ‘functional chain’ should be allocated to a component if this functional chain is set available into a M/S of a FSM linked to this component.
A functional chain can be set available into a M/S of an FSM linked to a component, only if all functions of this functional chains are allocated to this component.

'''DWF_SM_34''' - The first element into the lifeline of a component should be a M/S if at least one FSM is linked to this component.
Within an exchange scenario, for the lifeline of a component for which an FSM is linked, one of the following is required:
* Either the first object put into this lifeline is a M/S (of this FSM).
* Or the diagram’s pre-condition defines the first M/S of the considered lifeline.

'''DWF_SM_35''' - Between two consecutive M/Ss placed on a lifeline, there exists a path of transitions between these M/Ss.
Within an exchange scenario, between two consecutive M/Ss placed on a lifeline, there exists a path of transitions between these M/Ss.

'''DWF_SM_36''' - The functional exchange trigger of two consecutive M/Ss has to be added between these two M/Ss in the lifeline.
Within an exchange scenario, let consider two consecutive M/Ss put in a lifeline with an existing transition triggered by a functional exchange; if the lifeline of the architectural part (i.e.: another component or an actor), for which the function starting the functional exchange, is present into the exchange scenario; this functional exchange has to be added between these two M/Ss.

'''DWF_SM_38''' - Target M/Ss of outgoing transitions from a Fork Pseudo-State must have to be in a distinct region than the Fork Pseudo-State.
Target M/Ss of outgoing transitions from a Fork Pseudo-State must have to be in a distinct region than the Fork Pseudo-State.

'''DWF_SM_39''' - Outgoing transitions from a Fork Pseudo-State must target M/Ss into distinct regions of an orthogonal state.
Outgoing transitions from a Fork Pseudo-State must target M/Ss into distinct regions of an orthogonal state.

'''DWF_SM_40''' - Source M/Ss of incoming transitions to a Join Pseudo-State must have to be in a distinct region than the Join Pseudo-State.
Source M/Ss of incoming transitions to a Join Pseudo-State must have to be in a distinct region than the Join Pseudo-State.

'''DWF_SM_41''' - Incoming transitions to a Join Pseudo-State must originate from M/Ss into different regions of an orthogonal state.
Incoming transitions to a Join Pseudo-State must originate from M/Ss into different regions of an orthogonal state.

'''DWF_SM_42''' - Final State should not include a Region.
Final State should not include a Region.

'''DWF_SM_43''' - Generate global modes of the system and then analyze the configurations availability.
Generate global modes of the system and then analyze the configurations availability in these global modes. Not a true ‘validation’, has rather informational purpose.

'''DWF_SM_44''' - No inclusion of modes into states.
The inclusion of modes into states is not allowed.

'''DWF_SM_45''' - No inclusion of states into modes .
The inclusion of states into modes is not allowed.


'''DWF_SM_50''' - Element are included and excluded by CSConfiguration.
Element are included and excluded by CSConfiguration.

'''DWF_SM_52''' - Realising configuration
''Description missing''

'''DWF_SM_53''' - irregular realization between layer
''Description missing''

'''DWF_SM_60''' - Analysis of the comparison element completeness
''Description missing''

'''DWF_SM_61''' - Analysis of the comparison element correctness
''Description missing''

'''DWF_SM_62''' - Analysis of the comparison element consistency
''Description missing''

'''DWF_SM_63''' - Analysis of the comparison element consistency
''Description missing''

'''DWF_SM_90''' - Analysis of the situation element construction (completeness and correctness)
''Description missing''

'''DWF_SM_95'''
Compare each configuration or situation and check if they contain the same functions.

'''DWF_SM_96''' - Analysis of the result element correctness
''Description missing''

'''DWF_SM_97'''
Compare each configuration (one in the system, and other in the logical) and check if they contain the same functions.

'''DWF_SM_98'''
Compare each configuration (one in the pysical, and other in the logical) and check if they contain the same functions.

'''DWF_DC_34''' - Analyzing the assurance of the FunctionalChain in the States/Modes.
Analyzing the assurance of the FunctionalChain in the States/Modes. Validates on FunctionalChain. The functional chain is known as fully assured in a state/mode of a component, if all its functions allocated to this component are available in all configurations available in this state/mode

'''DWF_DC_35''' - Analyzing the assurance of the FunctionalChains in the State/Mode.
Analyzing the assurance of the FunctionalChains in the State/Mode. Validates on Mode. The functional chain is known as fully assured in a state/mode of a component, if all its functions allocated to this component are available in all configurations available in this state/mode

'''DWF_DC_36'''
Check if a included component has his port included in the other configuration.

'''DWF_DC_37'''
Check if an not or or operator have more than 1 values and if a not operator have only 1 value.